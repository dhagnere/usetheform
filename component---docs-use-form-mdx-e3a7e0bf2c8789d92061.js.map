{"version":3,"sources":["webpack:///../docs/useForm.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Form","Submit","Reset","CounterSubmitAttempts","Input","useValidation","value","trim","undefined","test","status","validation","initialState","email","type","name","touched","error","isMDXComponent"],"mappings":"gUAYaA,G,UAAe,S,kMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,MAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,WADR,WAGA,qBAAG,0BAAYC,WAAW,KAAvB,aAAH,uFACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,+GAIL,iBAAQ,CACN,GAAM,WADR,WAGA,yBAAQ,sBAAQA,WAAW,KAAI,0BAAYA,WAAW,UAAvB,YAA/B,aACA,8CACA,sBACE,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAK,0BAAYA,WAAW,UAAvB,UAA5C,2CACA,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAK,0BAAYA,WAAW,UAAvB,YAA5C,8FACA,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAK,0BAAYA,WAAW,UAAvB,aAA5C,8EACA,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAK,0BAAYA,WAAW,UAAvB,cAA5C,yFACA,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAK,0BAAYA,WAAW,UAAvB,mBAA5C,oEACA,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAK,0BAAYA,WAAW,UAAvB,UAA5C,wEACA,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAK,0BAAYA,WAAW,UAAvB,eAA5C,6GACA,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAK,0BAAYA,WAAW,UAAvB,aAA5C,yGAAwN,mBAAKA,WAAW,MAAK,gCAAMA,WAAW,OAAU,CAClQ,UAAa,wBAD0N,mDAK/O,8BACE,iBAAGA,WAAW,cAAa,sBAAQA,WAAW,KAAnB,OAA3B,yEAEF,iBAAQ,CACN,GAAM,eADR,eAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,qNAeL,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,mKAWL,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,gKAWL,iBAAQ,CACN,GAAM,WADR,WAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,iDAIL,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,6mBAAsnBC,SAAO,GAC9pBL,QACAH,kBACAS,eACAC,SACAC,WACAC,UACAC,0BACAC,UACAC,mBAT8pB,gBAU9pBf,IAV8pB,EAW9pBH,eAX8pB,GAY7pBO,QAAQ,eACR,WACC,IADK,EAKwBW,YAAc,CAF1B,SAAAC,GAAK,OAAIA,GAA0B,KAAjBA,EAAMC,YAAgBC,EAAY,YAFvD,SAAAF,GAAK,OAAMA,GAAU,4CAA4CG,KAAKH,QAAUE,EAAY,oBAInGE,EALF,KAKUC,EALV,KAML,OAAO,YAAC,IAAD,CAAMC,aAAc,CACzBC,MAAO,kBACNnB,QAAQ,QACX,uBACE,YAAC,IAAD,aAAOoB,KAAK,OAAOC,KAAK,QAAQC,SAAO,GAAKL,EAA5C,CAAwDjB,QAAQ,WAC/DgB,EAAOO,OAAS,yBAAQP,EAAOO,QAElC,YAAC,IAAD,CAAQvB,QAAQ,WAChB,YAAC,IAAD,CAAOA,QAAQ,UACf,YAAC,IAAD,CAAuBA,QAAQ,oC,gMAQvCH,EAAW2B,gBAAiB","file":"component---docs-use-form-mdx-e3a7e0bf2c8789d92061.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/iusehooks/usetheform/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from 'docz';\nimport { Form } from \"./helpers/Form\";\nimport { Submit } from \"./helpers/Submit\";\nimport { Reset } from \"./helpers/Reset\";\nimport { CounterSubmitAttempts } from \"./helpers/CounterSubmitAttempts\";\nimport { Input, useValidation } from './../src';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"useform\"\n    }}>{`useForm`}</h1>\n    <p><inlineCode parentName=\"p\">{`useForm()`}</inlineCode>{` is a custom React hook that will return helpers and the current state of the form.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`  const { state, isValid, pristine, submitted, submitAttempts, reset, formStatus, dispatch } = useForm()\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"returns\"\n    }}>{`Returns`}</h2>\n    <p>{`(`}<strong parentName=\"p\"><inlineCode parentName=\"strong\">{`helpers`}</inlineCode></strong>{`): object`}</p>\n    <p>{`An object that holds:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\"><inlineCode parentName=\"strong\">{`state`}</inlineCode></strong>{`: the current State of the entire Form.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\"><inlineCode parentName=\"strong\">{`isValid`}</inlineCode></strong>{`: a boolean which tells whether the form has passed all the validations constrains or not.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\"><inlineCode parentName=\"strong\">{`pristine`}</inlineCode></strong>{`: a boolean which tells whether the form fields have been modified or not.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\"><inlineCode parentName=\"strong\">{`submitted`}</inlineCode></strong>{`: a number which counts the number of times the form has been submitted with success.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\"><inlineCode parentName=\"strong\">{`submitAttempts`}</inlineCode></strong>{`: a number which counts the total number of submission attempts.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\"><inlineCode parentName=\"strong\">{`reset`}</inlineCode></strong>{`: a helper function which redset the Form state to an initial State.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\"><inlineCode parentName=\"strong\">{`formStatus`}</inlineCode></strong>{`: a string indicating the form status. It can be one of: \"ON_CHANGE\", \"ON_SUBMIT\", \"ON_RESET\", \"ON_INIT\".`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\"><inlineCode parentName=\"strong\">{`dispatch`}</inlineCode></strong>{`: a function used to update the form state. It accepts object which will be the new state of the form.`}<pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-javascript\"\n          }}>{`  dispatch(prev => ({ ...prev, newProp }))\n`}</code></pre></li>\n    </ul>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Tip`}</strong>{`: formStatus can be imported => import { STATUS } from \"usetheform\".`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const Reset = props => {\n  const { reset, pristine } = useForm();\n  return (\n    <button\n      disabled={pristine}\n      type=\"button\"\n      onClick={reset}\n    >\n      Reset\n    </button>\n  );\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const Submit = props => {\n const { isValid } = useForm();\n  return (\n    <button disabled={!isValid} type=\"submit\">\n      Submit\n    </button>\n  );\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const CounterSubmitAttempts = props => {\n  const { submitAttempts } = useForm();\n  return (\n    <span>\n      {submitAttempts}\n    </button>\n  );\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`  import Form, { Input } from 'usetheform'\n`}</code></pre>\n    <Playground __position={0} __code={'() => {\\n  const email = value =>\\n    !(value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\\\.[A-Z]{2,4}$/i.test(value))\\n      ? undefined\\n      : \\'Mail not Valid\\'\\n  const required = value =>\\n    value && value.trim() !== \\'\\' ? undefined : \\'Required\\'\\n  const [status, validation] = useValidation([required, email])\\n  return (\\n    <Form initialState={{ email: \\'foo@google.com\\' }}>\\n      <div>\\n        <Input type=\\\"text\\\" name=\\\"email\\\" touched {...validation} />\\n        {status.error && <label>{status.error}</label>}\\n      </div>\\n      <Submit />\\n      <Reset />\\n      <CounterSubmitAttempts />\\n    </Form>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Form,\n      Submit,\n      Reset,\n      CounterSubmitAttempts,\n      Input,\n      useValidation,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n      {() => {\n        const email = value => !(value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) ? undefined : \"Mail not Valid\";\n\n        const required = value => value && value.trim() !== \"\" ? undefined : \"Required\";\n\n        const [status, validation] = useValidation([required, email]);\n        return <Form initialState={{\n          email: \"foo@google.com\"\n        }} mdxType=\"Form\">\n        <div>\n          <Input type=\"text\" name=\"email\" touched {...validation} mdxType=\"Input\" />\n          {status.error && <label>{status.error}</label>}\n        </div>\n        <Submit mdxType=\"Submit\" />\n        <Reset mdxType=\"Reset\" />\n        <CounterSubmitAttempts mdxType=\"CounterSubmitAttempts\" />\n      </Form>;\n      }}\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}