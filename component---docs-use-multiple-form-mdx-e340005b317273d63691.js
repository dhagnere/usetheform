(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{v88m:function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return u})),a.d(t,"default",(function(){return d}));var n=a("k0FJ"),r=a("oedh"),i=a("mXGw"),o=a("/FXl"),c=a("TjRS"),b=a("ZFoC"),l=a("RnGj"),m=a("oXiK"),u=(a("aD51"),{});void 0!==u&&u&&u===Object(u)&&Object.isExtensible(u)&&!u.hasOwnProperty("__filemeta")&&Object.defineProperty(u,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"docs/useMultipleForm.mdx"}});var s={_frontmatter:u},p=c.a;function d(e){var t,a=e.components,d=Object(r.a)(e,["components"]);return Object(o.b)(p,Object(n.a)({},s,d,{components:a,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"usemultipleform"},"useMultipleForm"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"useMultipleForm(callback)")," is a custom React hook which provides the logic to handle the implementation of wizards."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"  const [getWizardStatus, wizardApi] = useMultipleForm(callback);\n")),Object(o.b)("h2",{id:"returns"},"Returns"),Object(o.b)("p",null,"(",Object(o.b)("strong",{parentName:"p"},Object(o.b)("inlineCode",{parentName:"strong"},"helpers")),"): array"),Object(o.b)("p",null,"An array that holds:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"strong"},"getWizardStatus")),": It is a function that returns the actual state of the wizard.."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"strong"},"wizardApi")),": an object which holds props that must be spreaded in each form.")),Object(o.b)("h2",{id:"basic-usage"},"Basic usage"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"  import Form, { Input, useMultipleForm } from 'usetheform'\n")),Object(o.b)(b.b,{__position:0,__code:'() => {\n  const [getWizardStatus, wizardApi] = useMultipleForm()\n  const [stateWizard, setStateWizard] = useState({})\n  return (\n    <div>\n      <Form {...wizardApi} name="form1" initialState={{ name: \'foo\' }}>\n        <Input type="text" name="name" />\n      </Form>\n      <Form {...wizardApi} name="form2" initialState={{ lastname: \'mouse\' }}>\n        <Input type="text" name="lastname" />\n      </Form>\n      <button onClick={() => setStateWizard(getWizardStatus())}>\n        Submit Wizard\n      </button>\n      <div>\n        <code>{JSON.stringify(stateWizard)}</code>\n      </div>\n    </div>\n  )\n}',__scope:(t={props:d,DefaultLayout:c.a,useState:i.useState,Playground:b.b,Form:l.a,Input:m.c,useMultipleForm:m.j},t.DefaultLayout=c.a,t._frontmatter=u,t),mdxType:"Playground"},(function(){var e=Object(m.j)(),t=e[0],a=e[1],r=Object(i.useState)({}),c=r[0],b=r[1];return Object(o.b)("div",null,Object(o.b)(l.a,Object(n.a)({},a,{name:"form1",initialState:{name:"foo"},mdxType:"Form"}),Object(o.b)(m.c,{type:"text",name:"name",mdxType:"Input"})),Object(o.b)(l.a,Object(n.a)({},a,{name:"form2",initialState:{lastname:"mouse"},mdxType:"Form"}),Object(o.b)(m.c,{type:"text",name:"lastname",mdxType:"Input"})),Object(o.b)("button",{onClick:function(){return b(t())}},"Submit Wizard"),Object(o.b)("div",null,Object(o.b)("code",null,JSON.stringify(c))))})))}void 0!==d&&d&&d===Object(d)&&Object.isExtensible(d)&&!d.hasOwnProperty("__filemeta")&&Object.defineProperty(d,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"docs/useMultipleForm.mdx"}}),d.isMDXComponent=!0}}]);
//# sourceMappingURL=component---docs-use-multiple-form-mdx-e340005b317273d63691.js.map